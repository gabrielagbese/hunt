/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/buffalo.glb 
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Model(props) {
  const { animationState = 'walk', ...restProps } = props
  const group = React.useRef()
  const { scene, animations } = useGLTF('/buffalo.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  // Play animation based on state
  React.useEffect(() => {
    if (actions) {
      // Debug: Log available animations
      console.log('üêÉ Buffalo available animations:', Object.keys(actions))
      console.log('üêÉ Buffalo animationState:', animationState)

      // Stop all animations first
      Object.values(actions).forEach(action => action.stop())

      // Play the appropriate animation
      let animationName = 'Walk' // Default animation name
      if (animationState === 'death') animationName = 'Death'
      else if (animationState === 'run') animationName = 'Run'
      else if (animationState === 'walk') animationName = 'Walk'

      console.log('üêÉ Buffalo trying to play animation:', animationName)

      if (actions[animationName]) {
        console.log('üêÉ Buffalo animation found, playing:', animationName)
        actions[animationName].play()
        if (animationState === 'death') {
          actions[animationName].setLoop(false, 1) // Play death animation once
        }
      } else {
        console.log('üêÉ Buffalo animation NOT found:', animationName)
      }
    }
  }, [actions, animationState])

  return (
    <group ref={group} {...restProps} dispose={null}>
      <group name="Scene">
        <group name="Player" position={[-1.06, 0.093, 1.397]} rotation={[Math.PI / 2, 0, 0]}>
          <group name="Models">
            <primitive object={nodes.Bull} />
            <skinnedMesh name="Bufallo_LP" geometry={nodes.Bufallo_LP.geometry} material={materials.Buffalo} skeleton={nodes.Bufallo_LP.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/buffalo.glb')
