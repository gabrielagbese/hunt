/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/elephant.glb 
Author: Rukh3D (https://sketchfab.com/rukh3d)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/elephant-4ae161372d6a4219a87340339d1ffe03
Title: Elephant
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Model(props) {
  const { animationState = 'walk', ...restProps } = props
  const group = React.useRef()
  const { scene, animations } = useGLTF('/elephant.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  // Play animation based on state
  React.useEffect(() => {
    if (actions) {
      // Stop all animations first
      Object.values(actions).forEach(action => action.stop())

      // Play the appropriate animation
      let animationName = 'TRS|walk'
      if (animationState === 'run') animationName = 'TRS|run'
      else if (animationState === 'attack') animationName = 'TRS|run attack'
      else if (animationState === 'death') animationName = 'TRS|death'

      if (actions[animationName]) {
        actions[animationName].play()
        if (animationState === 'death') {
          actions[animationName].setLoop(false, 1) // Play death animation once
        }
      }
    }
  }, [actions, animationState])

  return (
    <group ref={group} {...restProps} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.342}>
          <group name="elephantfbx" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="ElephantLP" />
                <group name="TRS" rotation={[-Math.PI / 2, 0, 0]}>
                  <group name="Object_6">
                    <primitive object={nodes._rootJoint} />
                    <group name="Object_8" />
                    <skinnedMesh name="Object_9" geometry={nodes.Object_9.geometry} material={materials.ElephantMaterial} skeleton={nodes.Object_9.skeleton} castShadow />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/elephant.glb')
